{"ast":null,"code":"var _jsxFileName = \"D:\\\\SLIIIT\\\\2ndYear2ndSemester\\\\ITP coding\\\\SkillSync_ITP\\\\FrontEnd\\\\react-frontend\\\\src\\\\layouts\\\\FreelancerWorkManagement\\\\GigOrder\\\\ImageCarousel.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Carousel } from 'react-bootstrap';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageCarousel = ({\n  gigId\n}) => {\n  _s();\n  const [images, setImages] = useState([]);\n  useEffect(() => {\n    const fetchImages = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8082/freelancer-gigs/${gigId}/gig-images/my-gig-images`);\n        // Map absolute paths to relative paths\n        const mappedImages = response.data.map(image => ({\n          ...image,\n          gigImagePath: `/gigImages/${gigId}/${getFileNameFromPath(image.gigImagePath)}`\n        }));\n        setImages(mappedImages);\n      } catch (error) {\n        console.error('Error fetching images:', error);\n      }\n    };\n    fetchImages();\n  }, [gigId]);\n\n  // Function to extract file name from absolute path\n  const getFileNameFromPath = path => {\n    const parts = path.split('/');\n    return parts[parts.length - 1];\n  };\n  return /*#__PURE__*/_jsxDEV(Carousel, {\n    style: {\n      maxWidth: '900px',\n      maxHeight: '900px',\n      margin: '0 auto'\n    },\n    children: images.map((image, index) => /*#__PURE__*/_jsxDEV(Carousel.Item, {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"d-block w-100\",\n        src: image.gigImagePath,\n        alt: `Slide ${index} ${image.gigImagePath}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageCarousel, \"ScKwoilS3xNJP1q5r1COmrAdDIM=\");\n_c = ImageCarousel;\nexport default ImageCarousel;\nvar _c;\n$RefreshReg$(_c, \"ImageCarousel\");","map":{"version":3,"names":["React","useState","useEffect","Carousel","axios","jsxDEV","_jsxDEV","ImageCarousel","gigId","_s","images","setImages","fetchImages","response","get","mappedImages","data","map","image","gigImagePath","getFileNameFromPath","error","console","path","parts","split","length","style","maxWidth","maxHeight","margin","children","index","Item","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/SLIIIT/2ndYear2ndSemester/ITP coding/SkillSync_ITP/FrontEnd/react-frontend/src/layouts/FreelancerWorkManagement/GigOrder/ImageCarousel.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Carousel } from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\ninterface ImageData {\r\n  gigImagePath: string;\r\n}\r\n\r\ninterface ImageCarouselProps {\r\n  gigId: string;\r\n}\r\n\r\nconst ImageCarousel: React.FC<ImageCarouselProps> = ({ gigId }) => {\r\n  const [images, setImages] = useState<ImageData[]>([]);\r\n\r\n  useEffect(() => {\r\n    const fetchImages = async () => {\r\n      try {\r\n        const response = await axios.get<ImageData[]>(`http://localhost:8082/freelancer-gigs/${gigId}/gig-images/my-gig-images`);\r\n        // Map absolute paths to relative paths\r\n        const mappedImages = response.data.map(image => ({\r\n          ...image,\r\n          gigImagePath: `/gigImages/${gigId}/${getFileNameFromPath(image.gigImagePath)}`\r\n        }));\r\n        setImages(mappedImages);\r\n      } catch (error) {\r\n        console.error('Error fetching images:', error);\r\n      }\r\n    };\r\n\r\n    fetchImages();\r\n  }, [gigId]);\r\n\r\n  // Function to extract file name from absolute path\r\n  const getFileNameFromPath = (path: string) => {\r\n    const parts = path.split('/');\r\n    return parts[parts.length - 1];\r\n  };\r\n\r\n  return (\r\n    <Carousel style={{ maxWidth: '900px', maxHeight: '900px', margin: '0 auto' }}>\r\n      {images.map((image, index) => (\r\n        <Carousel.Item key={index}>\r\n          <img className=\"d-block w-100\" src={image.gigImagePath} alt={`Slide ${index} ${image.gigImagePath}`} />\r\n        </Carousel.Item>\r\n      ))}\r\n    </Carousel>\r\n  );\r\n};\r\n\r\nexport default ImageCarousel;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAU1B,MAAMC,aAA2C,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACjE,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAc,EAAE,CAAC;EAErDC,SAAS,CAAC,MAAM;IACd,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAe,yCAAwCN,KAAM,2BAA0B,CAAC;QACxH;QACA,MAAMO,YAAY,GAAGF,QAAQ,CAACG,IAAI,CAACC,GAAG,CAACC,KAAK,KAAK;UAC/C,GAAGA,KAAK;UACRC,YAAY,EAAG,cAAaX,KAAM,IAAGY,mBAAmB,CAACF,KAAK,CAACC,YAAY,CAAE;QAC/E,CAAC,CAAC,CAAC;QACHR,SAAS,CAACI,YAAY,CAAC;MACzB,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAEDT,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACJ,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMY,mBAAmB,GAAIG,IAAY,IAAK;IAC5C,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC;IAC7B,OAAOD,KAAK,CAACA,KAAK,CAACE,MAAM,GAAG,CAAC,CAAC;EAChC,CAAC;EAED,oBACEpB,OAAA,CAACH,QAAQ;IAACwB,KAAK,EAAE;MAAEC,QAAQ,EAAE,OAAO;MAAEC,SAAS,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAS,CAAE;IAAAC,QAAA,EAC1ErB,MAAM,CAACO,GAAG,CAAC,CAACC,KAAK,EAAEc,KAAK,kBACvB1B,OAAA,CAACH,QAAQ,CAAC8B,IAAI;MAAAF,QAAA,eACZzB,OAAA;QAAK4B,SAAS,EAAC,eAAe;QAACC,GAAG,EAAEjB,KAAK,CAACC,YAAa;QAACiB,GAAG,EAAG,SAAQJ,KAAM,IAAGd,KAAK,CAACC,YAAa;MAAE;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,GADrFR,KAAK;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CAChB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAEf,CAAC;AAAC/B,EAAA,CApCIF,aAA2C;AAAAkC,EAAA,GAA3ClC,aAA2C;AAsCjD,eAAeA,aAAa;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}